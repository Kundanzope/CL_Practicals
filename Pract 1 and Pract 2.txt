Pract 1

factclient.py

import xmlrpc.client

with xmlrpc.client.ServerProxy("http://localhost:8000/RPC2") as proxy:
    try:
        input_value = int(input("enter the number"))  # You can replace this with any positive integer
        result = proxy.calculate_factorial(input_value)
        print(f"Factorial of {input_value} is: {result}")
    except Exception as e:
        print(f"Error: {e}")


factserver.py

from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

class FactorialServer:
    def calculate_factorial(self, n):
        if n < 0:
            raise ValueError("Input must be a non-negative integer.")
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

with SimpleXMLRPCServer(('localhost', 8000), requestHandler=RequestHandler) as server:
    server.register_introspection_functions()
    server.register_instance(FactorialServer())
    print("FactorialServer is ready to accept requests.")
    server.serve_forever()


Pract 2

client.py

import Pyro4

def main():
    server = Pyro4.Proxy("PYRONAME:string.concat")  # Connect using registered name
    str1 = input("Enter first string: ")
    str2 = input("Enter second string: ")

    result = server.concatenate_strings(str1, str2)
    print("Concatenated Result:", result)

if __name__ == "__main__":
    main()


server.py

import Pyro4

@Pyro4.expose
class StringConcatenationServer:
    def concatenate_strings(self, str1, str2):
        return str1 + str2

def main():
    daemon = Pyro4.Daemon()  # Create Pyro daemon
    ns = Pyro4.locateNS()    # Locate the name server

    server = StringConcatenationServer()
    uri = daemon.register(server)
    ns.register("string.concat", uri)

    print("Server is ready. URI:", uri)
    daemon.requestLoop()

if __name__ == "__main__":
    main()
